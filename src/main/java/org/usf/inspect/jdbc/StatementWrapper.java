package org.usf.inspect.jdbc;

import static org.usf.inspect.core.ExecutionMonitor.call;
import static org.usf.inspect.core.ExecutionMonitor.exec;
import static org.usf.inspect.jdbc.JDBCAction.WARNING;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;

import lombok.RequiredArgsConstructor;
import lombok.experimental.Delegate;

/**
 * 
 * @author u$f
 *
 */
@RequiredArgsConstructor
public class StatementWrapper implements Statement {

	@Delegate
	protected final Statement st;
	protected final DatabaseRequestMonitor monitor;
	
	@Override
	public void addBatch(String sql) throws SQLException {
		exec(()-> st.addBatch(sql), monitor.addBatchStageHandler(sql));
	}
	
	@Override
	public boolean execute(String sql) throws SQLException {
		return call(()-> st.execute(sql), monitor.executeStageHandler(sql));
	}
	
	@Override
	public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
		return call(()-> st.execute(sql, autoGeneratedKeys), monitor.executeStageHandler(sql));
	}
	
	@Override
	public boolean execute(String sql, int[] columnIndexes) throws SQLException {
		return call(()-> st.execute(sql, columnIndexes), monitor.executeStageHandler(sql));
	}
	
	@Override
	public boolean execute(String sql, String[] columnNames) throws SQLException {
		return call(()-> st.execute(sql, columnNames), monitor.executeStageHandler(sql));
	}
	
	@Override
	public ResultSet executeQuery(String sql) throws SQLException {
		return new ResultSetWrapper(call(()-> st.executeQuery(sql), monitor.executeQueryStageHandler(sql)), monitor);
	}
	
	@Override
	public int executeUpdate(String sql) throws SQLException {
		return call(()-> st.executeUpdate(sql), monitor.executeUpdateStageHandler(sql));
	}
	
	@Override
	public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
		return call(()-> st.executeUpdate(sql, autoGeneratedKeys), monitor.executeUpdateStageHandler(sql));
	}
	
	@Override
	public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
		return call(()-> st.executeUpdate(sql, columnIndexes), monitor.executeUpdateStageHandler(sql));
	}
	
	@Override
	public int executeUpdate(String sql, String[] columnNames) throws SQLException {
		return call(()-> st.executeUpdate(sql, columnNames), monitor.executeUpdateStageHandler(sql));
	}

	@Override
	public int[] executeBatch() throws SQLException {
		return call(st::executeBatch, monitor.executeBatchStageHandler());
	}
	
	@Override
	public long executeLargeUpdate(String sql) throws SQLException {
		return call(()-> st.executeLargeUpdate(sql), monitor.executeLargeUpdateStageHandler(sql));
	}
	
	@Override
	public long executeLargeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
		return call(()-> st.executeLargeUpdate(sql, autoGeneratedKeys), monitor.executeLargeUpdateStageHandler(sql));
	}
	
	@Override
	public long executeLargeUpdate(String sql, int[] columnIndexes) throws SQLException {
		return call(()-> st.executeLargeUpdate(sql, columnIndexes), monitor.executeLargeUpdateStageHandler(sql));
	}
	
	@Override
	public long executeLargeUpdate(String sql, String[] columnNames) throws SQLException {
		return call(()-> st.executeLargeUpdate(sql, columnNames), monitor.executeLargeUpdateStageHandler(sql));
	}
	
	@Override
	public long[] executeLargeBatch() throws SQLException {
		return call(st::executeLargeBatch, monitor.executeLargeBatchStageHandler());
	}
	
	@Override
	public ResultSet getResultSet() throws SQLException {
		return new ResultSetWrapper(st.getResultSet(), monitor);
	}
	
	@Override
	public int getUpdateCount() throws SQLException {
		var n = st.getUpdateCount();
		monitor.updateStageRowsCount(n);
		return n;
	}
	
	@Override
	public long getLargeUpdateCount() throws SQLException {
		var n = st.getLargeUpdateCount();
		monitor.updateStageRowsCount(n);
		return n;
	}

	@Override
	public SQLWarning getWarnings() throws SQLException {
		 return call(st::getWarnings, monitor.stageHandler(WARNING));
	}
	
}
