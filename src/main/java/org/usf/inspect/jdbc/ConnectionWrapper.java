package org.usf.inspect.jdbc;

import static org.usf.inspect.core.ExecutionMonitor.call;
import static org.usf.inspect.core.ExecutionMonitor.exec;
import static org.usf.inspect.jdbc.JDBCAction.COMMIT;
import static org.usf.inspect.jdbc.JDBCAction.METADATA;
import static org.usf.inspect.jdbc.JDBCAction.ROLLBACK;
import static org.usf.inspect.jdbc.JDBCAction.SAVEPOINT;

import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Savepoint;
import java.sql.Statement;

import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.experimental.Delegate;

/**
 * 
 * @author u$f
 *
 */
@RequiredArgsConstructor
public final class ConnectionWrapper implements Connection {
	
	@Delegate
	private final Connection cn;
	private final DatabaseRequestMonitor monitor;
	@Getter
	private ConnectionMetadataCache cache;

	@Override
	public Statement createStatement() throws SQLException {
		return new StatementWrapper(call(cn::createStatement, monitor.statementStageHandler(null)), monitor);
	}
	
	@Override
	public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
		return new StatementWrapper(call(()-> cn.createStatement(resultSetType, resultSetConcurrency), monitor.statementStageHandler(null)), monitor);
	}
	
	@Override
	public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
		return new StatementWrapper(call(()-> cn.createStatement(resultSetType, resultSetConcurrency, resultSetHoldability), monitor.statementStageHandler(null)), monitor);
	}
	
	@Override
	public PreparedStatement prepareStatement(String sql) throws SQLException {
		return new PreparedStatementWrapper(call(()-> cn.prepareStatement(sql), monitor.statementStageHandler(sql)), monitor);
	}
	
	@Override
	public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
		return new PreparedStatementWrapper(call(()-> cn.prepareStatement(sql, resultSetType, resultSetConcurrency), monitor.statementStageHandler(sql)), monitor);
	}
	
	@Override
	public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
		return new PreparedStatementWrapper(call(()-> cn.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability), monitor.statementStageHandler(sql)), monitor);
	}
	
	@Override
	public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
		return new PreparedStatementWrapper(call(()-> cn.prepareStatement(sql, autoGeneratedKeys), monitor.statementStageHandler(sql)), monitor);
	}
	
	@Override
	public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
		return new PreparedStatementWrapper(call(()-> cn.prepareStatement(sql, columnIndexes), monitor.statementStageHandler(sql)), monitor);
	}
	
	@Override
	public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
		return new PreparedStatementWrapper(call(()-> cn.prepareStatement(sql, columnNames), monitor.statementStageHandler(sql)), monitor);
	}
	
	@Override
	public Savepoint setSavepoint() throws SQLException {
		return call(cn::setSavepoint, monitor.stageHandler(SAVEPOINT));
	}
	
	@Override
	public Savepoint setSavepoint(String name) throws SQLException {
		return call(()-> cn.setSavepoint(name), monitor.stageHandler(SAVEPOINT));
	}
	
	@Override
	public void commit() throws SQLException {
		exec(cn::commit, monitor.stageHandler(COMMIT));
	}
	
	@Override
	public void rollback() throws SQLException {
		exec(cn::rollback, monitor.stageHandler(ROLLBACK));
	}
	
	@Override
	public void rollback(Savepoint savepoint) throws SQLException {
		exec(()-> cn.rollback(savepoint), monitor.stageHandler(ROLLBACK));
	}
	
	@Override
	public DatabaseMetaData getMetaData() throws SQLException {
		return new DatabaseMetaDataWrapper(call(cn::getMetaData, monitor.stageHandler(METADATA)), monitor);
	}
	
	@Override
	public void close() throws SQLException {
		exec(cn::close, monitor::handleDisconnection);
	}
}
